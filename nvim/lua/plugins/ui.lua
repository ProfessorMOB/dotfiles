return {
		--> Neovim Icons
	{
		"nvim-tree/nvim-web-devicons",
		config = function()
			require("nvim-web-devicons").setup()
		end
	},
		--> My Colorschemes
	{
		"luisiacc/gruvbox-baby",
		config = function()
			-- vim.cmd.colorscheme("gruvbox-baby")
		end,
	}, {
		"rebelot/kanagawa.nvim",
		config = function()
			-- vim.cmd.colorscheme("kanagawa")
		end,
	}, {
		"folke/tokyonight.nvim",
		config = function() 
			require("tokyonight").setup()
			vim.cmd.colorscheme("tokyonight")
		end,
	},
		--> Setup Color Tuner
	{
		"zefei/vim-colortuner",
	},
		--> Window Management and Resizing
	{
		"kwkarlwang/bufresize.nvim",
		config = function() 
			require("bufresize").setup()
		end,
	}, 
	--[[ {	--> I can use navigator.nvim if I want to use terminal multiplexers
		"numToStr/Navigator.nvim",
		config = function()
			require("Navigator").setup()
		end,
	}, ]]
		--> Setting up my Start Screen
	{
		"goolord/alpha-nvim", 
		config = function()
			local alpha = require('alpha')
			local dashboard = require('alpha.themes.dashboard')

			local muslim_dashboard = function()
				dashboard.section.header.val = {
					"           ▄ ▄                   ",
					"       ▄   ▄▄▄     ▄ ▄▄▄ ▄ ▄     ",
					"       █ ▄ █▄█ ▄▄▄ █ █▄█ █ █     ",
					"    ▄▄ █▄█▄▄▄█ █▄█▄█▄▄█▄▄█ █     ",
					"  ▄ █▄▄█ ▄ ▄▄ ▄█ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ",
					"  █▄▄▄▄ ▄▄▄ █ ▄ ▄▄▄ ▄ ▄▄▄ ▄ ▄ █ ▄",
					"▄ █ █▄█ █▄█ █ █ █▄█ █ █▄█ ▄▄▄ █ █",
					"█▄█ ▄ █▄▄█▄▄█ █ ▄▄█ █ ▄ █ █▄█▄█ █",
					"    █▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█ █▄█▄▄▄█    ",
				}
				dashboard.section.footer.val= {
					"In the name of Allah", 
					" the Most Graceful,",
					" the Most Merciful,",
					-- "        ﷳ  ﷲ",
					-- "     ﷽             ",
				}
			end
			local skibidi_toilet_dashboard = function()
				dashboard.section.header.val = {
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣤⣤⣤⣤⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⡿⡟⣯⡯⠿⣉⠭⠩⡍⠝⣛⢻⠿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⡿⣏⢳⡩⣕⣾⣓⣯⣿⣿⣿⡻⣿⣿⡾⢷⣻⡿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡿⣝⢎⣧⣿⣿⣿⣿⡿⣿⣻⡉⠀⣝⠻⣿⣷⣿⣿⣯⢿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⡽⣎⣿⣿⢟⣽⡳⢯⣽⣳⣏⣿⠐⣾⣿⣛⣯⡿⣿⣿⣿⣻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣷⣻⣽⣿⢇⠫⢞⣹⣇⠾⣷⢯⣿⢜⣿⡷⢣⡾⣽⠢⣘⢻⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⡷⣳⡻⣜⢠⣱⢾⣿⡿⡗⢯⣛⡾⢸⣿⡹⣳⣿⠦⣑⠠⣻⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣻⢧⡻⣄⣿⠟⠸⣿⡿⢻⠜⣣⣿⠸⣟⣣⡿⢻⣿⣿⡠⣿⣼⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⡿⣽⢎⣷⣭⠿⢶⢶⠶⡶⢾⣳⣿⡹⣘⢻⣾⣁⣈⣛⠋⢹⣿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣬⣿⣿⣟⡷⣮⡳⡜⢦⠕⠲⡀⣿⢿⣷⣦⣴⡡⣮⣿⣽⣿⡦⣁⡜⣿⢿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⢺⣿⣿⣟⢾⣻⣗⣻⡟⢀⢊⡔⡐⠆⢢⢘⣻⣿⣿⣿⣿⡿⣛⢷⡡⢿⣯⣿⣿⠱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⢧⣿⣼⣏⣿⣿⣾⣏⣿⣿⣿⣿⣷⣬⣯⣍⣳⣻⢛⢛⣳⣍⣝⣮⣽⣆⣹⣿⡏⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣏⢮⣹⣿⣾⣟⣿⣸⢿⣻⣿⣿⣿⢿⢿⢻⠛⢟⠻⡿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢯⣽⣿⢿⣯⢿⣯⢿⡷⠙⣿⣟⣾⢺⠚⡖⠖⢤⠧⠯⣿⣿⣿⢿⣿⣿⣯⡖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢯⣟⣾⣹⣗⣣⠈⠻⣿⣾⣶⣳⣶⣼⣤⣿⣿⠟⣡⣿⣿⣿⠧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣻⣞⣧⣟⣦⠍⡄⠴⢋⣩⣉⣩⣝⣻⡟⡡⢞⣷⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣽⣾⣾⡽⣞⠤⣈⠉⡉⠉⠉⢩⢙⡶⣥⢿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣹⣿⣿⣿⣿⣟⣿⣯⣟⣦⢳⣐⠦⣑⣎⢶⣽⣾⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣇⣿⣞⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣽⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠈⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡧⢿⣜⡾⣭⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⡠⠔⠒⠒⠒⠐⠈⠒⠐⠒⡾⣿⣿⣿⣏⣿⢯⣷⢣⡓⠜⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠘⢖⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠒⠢⣄⠀",
					"⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⢹⣿⣿⣿⢼⡿⣯⠳⡌⡘⠤⣉⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠈⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣",
					"⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠻⣿⣿⣾⢽⣿⣳⢡⠘⡰⠠⠁⠂⡇⢬⢉⢯⡻⣽⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸",
					"⠀⠀⠀⢉⡟⠚⠓⠚⠒⠒⠒⡺⠁⠀⠀⠀⠀⠈⣿⣟⡾⣿⢧⢢⠁⢆⠱⠀⠐⣏⠦⣉⠶⣹⣳⡿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠈⣖⠒⠒⠒⠒⠒⠒⠒⠒⠒⢾⠁",
					"⠀⠀⠀⡏⠉⠉⠉⠉⠉⠉⢹⠃⠀⠀⠀⠀⠀⠀⣿⣿⡳⣿⣯⠆⣁⠊⠤⠁⠀⣿⠰⡡⢏⡷⣽⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡉⠉⠉⠉⠉⠉⠉⠉⠉⠉⢳",
					"⠀⣀⣀⡇⠀⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⢸⣺⡷⣿⣷⠩⢄⡘⢄⠃⠀⢿⡱⢌⡳⡽⢾⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸",
					"⢸⠤⣤⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢳⣿⣯⣓⠂⢌⢢⠡⠀⣹⢆⠣⣽⣹⢿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢸",
					"⢠⣀⣧⡇⠀⠀⠀⠀⠀⡎⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡯⣾⣿⢦⡉⢂⠦⡑⠠⢸⣋⠖⣱⢯⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠈⠣⠼⡇⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⢸⡷⣿⡽⣿⡶⡑⢌⢲⡁⠆⣹⢮⠸⣭⣟⣾⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⢸", 
					"⠀⠀⠀⡇⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⣷⢿⣿⡷⣭⠌⣆⢣⠒⣸⢧⢛⡶⣯⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⢫⣿⡿⡜⡰⢊⡇⢒⢸⣯⢎⡷⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⢯⣿⣿⡱⢡⢫⡜⢠⢻⣗⢮⡽⣷⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣯⣿⣷⣫⠕⡮⡜⢄⢺⡿⢬⣟⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⡗⣿⣟⡶⡙⢶⣙⠢⣩⣿⢣⣟⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡀⠀⠀⠀⠀⠀⠀⢸", 
					"⠀⠀⠀⡇⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣏⣿⣯⢷⡙⢮⣇⢃⠖⣿⢣⣟⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⠀⠀⢸", 
					"⠀⠀⠀⡇⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⢾⣿⢧⢏⡳⣞⠌⣚⢿⡹⣞⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠆⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡿⣿⣛⠮⡵⣎⠣⢜⣻⢵⣻⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⣿⣿⣟⣿⣽⢳⡹⣬⠃⡜⣺⢧⡿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⢸",
					"⠀⠀⠀⡇⠀⠀⠀⠀⠈⢿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣯⣿⣞⡧⣝⡖⢣⠘⣽⡾⣽⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠃⠀⠀⠀⠀⠀⠀⠀⣺",
					"⠀⠀⠀⠹⢄⡀⠀⠀⠀⠈⠻⣿⣷⣦⣄⣀⠀⠀⠀⠀⣿⣿⣷⣿⣻⡜⣧⣛⠤⠑⡎⢿⣽⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⡿⠃⠀⠀⠀⠀⠀⠀⠀⢀⠇",
					"⠀⠀⠀⠀⠀⠉⡲⠚⠉⠉⠉⠉⠉⢉⣩⣭⠭⠭⠭⠭⠽⣿⣿⣻⢷⣛⠶⣭⠂⠱⡘⡽⣾⡿⠭⠭⠭⠭⠭⠭⣍⣓⠒⠒⠒⠛⠛⠛⠿⠿⠤⠤⣄⣀⣀⣀⣤⠤⠖⠋⠀",
					"⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⠀⡴⢋⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⡿⣽⣻⢶⡁⢦⡱⣹⣿⣇⡀⠀⠀⠀⠀⠀⠀⢀⡉⣶⠀⠀⠀⠀⠀⠀⠀⠀⣸⠌⠙⡄⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⢠⡇⠀⠀⠀⢀⠀⠀⠙⢦⣶⣶⣾⣿⡿⠿⠿⣿⣿⣷⣿⡿⣽⣯⡗⣬⢳⣯⣿⡟⠿⠿⣿⣿⣿⣷⣶⠶⠛⠁⠀⠀⠀⠀⠀⠀⠀⣼⠃⠀⢠⡇⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⡞⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠑⠒⠲⠦⠼⠿⠷⠿⠿⠿⠾⠷⠾⠻⠞⠛⠓⠒⠒⠊⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠋⠁⠀⠀⢰⠇⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⡧⠀⠈⠓⠲⠤⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡠⠤⠒⠚⠉⠀⠀⠀⠀⠀⢀⢺⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⣧⠡⠀⠀⠀⠀⠀⠀⠉⠉⠁⠒⠒⠒⠲⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠴⠂⠒⠒⠒⠒⠒⠂⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⢾⠀⠀⠀⠀⠀⠀",
					"⠀⠀⠀⠀⣷⠈⡔⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠤⡏⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⢹⡘⢄⠈⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡈⣼⠃⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠘⡇⡎⠐⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠁⠒⡟⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⢻⡔⢣⢀⠂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠢⢌⣳⠃⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠈⣷⠡⠆⡌⢀⠂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⡄⢣⢮⠃⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠘⢯⡚⣄⠣⣈⠐⡈⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠐⡀⢎⡰⣳⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠈⢻⣤⠓⡤⢒⠠⣁⠂⠌⡀⠄⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠄⡁⠂⢄⠱⣈⢶⡝⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣗⡘⢆⡱⢀⠎⡰⢐⢂⡐⠄⣈⠐⡀⢂⠀⠄⡀⢀⠀⡀⢀⠠⠀⠠⢀⠂⡈⠄⡁⢂⠅⠢⠑⡈⢆⠱⣼⠎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡜⡄⠢⢉⠢⠑⠌⢂⠜⡐⠠⢃⠐⠂⠌⠐⢀⠂⠐⠀⠂⠀⠁⠂⠀⠐⠀⠐⠀⠂⠈⠄⠡⠐⡨⢱⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡄⢁⠂⠄⠡⠈⠀⠠⠀⠁⠀⠈⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢂⠱⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢻⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡜⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠢⢄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
					-- "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠒⠒⠀⠤⠤⠤⠤⠤⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠤⠤⠄⠒⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				}
				dashboard.section.footer.val= {
					-- "Skibidi dom dom dom yes yes",
					-- "  Skibidi dom dom yee yee",
					"\".eid lliw steliot llA\"",
					"   -Titan TV Man (Skibidi Toilet)",
					"",
				}
			end
			
			local minecraft_dashboard = function()
				dashboard.section.header.val = {
					"⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀",
					"⠀⠀⠀⠀⣾⠉⠀⠁⠀⢩⣿⣦⡀⠀⠀⢠⡏⠀⠀⠀⠀⣹⣿⠋⠀⠁⠈⠀⣿⣿⠁⠀⠀⠀⢨⣿⡄⢸⠃⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡇⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡄",
					"⠀⠀⠀⣰⠇⠀⠀⠀⠀⠘⢛⣿⣿⣴⠟⠛⠁⠀⠀⠀⢀⣿⡿⠀⠀⠀⠀⢰⣿⡇⠀⠀⠀⠀⠘⠛⣿⣿⠒⠀⠀⠀⢠⣿⡇⠀⠀⠀⠀⢠⣶⣤⣦⣴⣤⣶⣾⣿⠁⠀⠀⠀⠀⣴⣦⣶⣴⣦⣴⣾⣿⡇⠀⠀⠀⠀⢰⣶⡄⠀⠀⠀⠀⢸⣿⡀⠀⠀⣶⣶⡀⠀⣶⣶⡄⠀⠀⣿⣧⠀⠀⠀⠀⠠⣦⣴⣶⣤⣤⣴⣿⣿⣦⣤⣤⣆⠀⠀⠀⠀⠰⣶⣤⣼⠗",
					"⠀⠀⢀⡟⠀⠀⠀⠀⠀⠀⠼⡿⢿⠿⠀⠀⠀⠀⠀⠀⣼⣿⠇⠀⠀⠀⠀⣸⣿⠁⠀⠀⠀⠀⠀⠠⠿⠇⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠸⠿⠿⢿⠿⠿⠿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠘⠿⠇⠀⠀⠀⣀⣸⣿⡇⠀⠀⠀⣬⣿⣿⣧⡍⠀⠀⠀⢻⣿⠀⠀⠀⠀⠀⠿⠿⠿⠿⠿⠿⠿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⢿⡿⠃⠀",
					"⠀⠀⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡿⠀⠀⠀⠀⢀⣿⡟⠀⠀⠀⠀⢀⣤⡄⠀⠀⠀⠀⠀⠀⢸⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠻⣿⡇⠀⠀⠀⠸⡟⠛⠻⡇⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣇⠀⠀⠀⠀⠘⣇⠀⠀",
					"⠀⢰⡇⠀⠀⠀⠀⣰⣶⠂⠀⠀⢰⣶⠆⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⢸⣿⠇⠀⠀⠀⠀⢸⣿⡃⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣶⣶⣶⣶⣶⣶⣶⣿⣿⠀⠀⠀⠀⠀⣿⠉⠉⠉⠉⠉⠉⢻⣿⠀⠀⠀⠀⠀⣶⣶⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀⠀⠀⠀⠀⣶⣶⣶⣷⣶⣶⣾⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⢹⡄⠀",
					"⢀⡟⠀⠀⠀⠀⢠⣿⣟⣀⣀⣀⣾⡿⠀⠀⠀⠀⠀⣾⣿⠀⠀⠀⠀⠀⣾⣿⠀⠀⠀⠀⠀⣿⣿⣿⡟⠀⠀⠀⠀⠀⣿⡿⠀⠀⠀⠀⠀⠿⠿⠿⠿⠿⠿⠿⣿⣿⠀⠀⠀⠀⠀⠿⠦⠤⠴⠤⠦⠤⣾⣿⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⢿⣿⠀⠀⠀⠀⠀⢻⣿⠀⠀⠀⠀⠀⣻⣿⡀⠀⠀⠀⠀⢹⣿⣿⣿⣿⡿⠙⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠈⣷⠀",
					"⣼⠁⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⢠⣿⡇⠀⠀⠀⠀⢠⣿⡇⠀⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⢻⣿⠀⠀⠀⠀⠀⢸⣿⡄⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⢸⣿⡇⠀⠀⠀⠀⠘⣿⣿⣿⠟⠀⠀⢹⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⢸⡆",
					"⢿⣤⣤⣤⣤⣴⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⣤⣴⣾⣿⣧⣤⣶⣤⣤⣾⣿⣷⣤⣶⣤⣤⣾⣿⣿⣿⣶⣤⣤⣶⣤⣾⣿⣷⣤⣴⣦⣤⣤⣤⣤⣴⣦⣤⣤⣶⣿⣿⣤⣤⣶⣾⣷⣤⣤⣤⣤⣶⣦⣴⣿⣿⣶⣤⣤⣤⣴⣾⣿⣶⣤⣶⣤⣴⣾⣿⣷⣤⣴⣶⣤⣾⣿⣷⣤⣤⣤⣤⣴⣿⣿⣤⣤⣤⣤⣶⡟⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣷⣦⣤⣤⣤⣴⠟",
					"⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀",
					"⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⡟⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀",
				}
				dashboard.section.footer.val = {
						--> I should implement a Minecraft quote picker!
					"A Creeper a day keeps the Diamonds away, as I always say",
				}
			end

			dashboard.section.buttons.val = { --> I used braille no dots pattern as a space lol
				-- dashboard.button("⠀", "", ""),
				dashboard.button("h", " Open Recent Projects", ":Telescope neovim-project history<CR>"),
				dashboard.button("o", "󰙅 Browse Filesystem", ":lua MiniFiles.open()<CR>"),
				-- dashboard.button("o", "󰙅 Browse Filesystem", ":Telescope file_browser<CR>"),
				dashboard.button("n", " Write/Take Notes", ":Neorg workspace notes<CR>"),
				dashboard.button("l", "󰒲 Open Lazy", ":Lazy<CR>"),
				dashboard.button("q", " Quit Neovim", ":qa<CR>"),
			}
			-- muslim_dashboard()
			skibidi_toilet_dashboard()
			-- minecraft_dashboard()

			alpha.setup(dashboard.config)
		end
	},
		--> Setup Lualine
	{
		"nvim-lualine/lualine.nvim",
		dependencies = { "nvim-tree/nvim-web-devicons" },
		config = function() 
			require("lualine").setup({
				options = {
					icons_enabled = false, 
					component_separators = { left = '', right = '' },
					section_separators = { left = '', right = ' ' }, 
				},
			})
		end
	},
		--> Make Neovim transparent so I can have a transparent neovim when working with Wezterm
	{
		"xiyaowong/transparent.nvim",
		config = function()
			local transparent = require("transparent")
			transparent.setup()
			transparent.clear_prefix("Telescope")
			transparent.clear_prefix("Minifiles*")
			transparent.clear_prefix("LazyNormal")
			-- transparent.clear_prefix("NormalFloat")
		end,
		lazy = false,
	},
}
